{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ADD_ENTRY","Symbol","POP_ENTRY","Boolean","window","location","hostname","match","ReactDOM","render","useState","eventDescription","setEventDescription","repetitions","setRepetitions","duration","setDuration","triggeredEvent","setTriggeredEvent","useReducer","state","action","type","maxPrio","prio","repeat","description","id","uuid","sort","nextEvent","newState","console","log","map","event","Math","max","queue","dispatch","style","display","justifyContent","alignContent","padding","flexDirection","textAlign","Typography","variant","Paper","height","margin","overflowY","key","Input","placeholder","defaultValue","onChange","value","target","parseInt","Button","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c841db1.chunk.js","sourcesContent":["// vim: set ft=javascript.jsx sts=2 sw=2:\n\nimport React, { useState, useReducer, useEffect } from \"react\";\n\nimport { Input, Paper, Button, Typography } from \"@material-ui/core\";\nimport uuid from \"uuid/v4\";\n\nconst ADD_ENTRY = Symbol(\"ADD_ENTRY\");\nconst POP_ENTRY = Symbol(\"POP_ENTRY\");\n\nexport default () => {\n  const [eventDescription, setEventDescription] = useState(\"\");\n  const [repetitions, setRepetitions] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [triggeredEvent, setTriggeredEvent] = useState(null);\n\n  const queueReducer = (state, action) => {\n    switch (action.type) {\n      case ADD_ENTRY: {\n        const { maxPrio, prio, repeat, description } = action;\n\n        if (description) {\n          return [\n            ...state,\n            {\n              id: uuid(),\n              prio,\n              maxPrio,\n              repeat,\n              description\n            }\n          ].sort(({ prio: prio1 }, { prio: prio2 }) => prio1 - prio2);\n        }\n        return state;\n      }\n      case POP_ENTRY: {\n        const [nextEvent, ...newState] = state;\n        if (!nextEvent) return state;\n        setTriggeredEvent(nextEvent);\n        console.log(nextEvent, nextEvent.repeat, !!nextEvent.repeat);\n        return [\n          ...newState.map(event => ({\n            ...event,\n            prio: Math.max(0, event.prio - nextEvent.prio)\n          })),\n          ...(nextEvent.repeat\n            ? [\n                {\n                  ...nextEvent,\n                  repeat: nextEvent.repeat - 1,\n                  prio: nextEvent.maxPrio\n                }\n              ]\n            : [])\n        ].sort(({ prio: prio1 }, { prio: prio2 }) => prio1 - prio2);\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\n  const [queue, dispatch] = useReducer(queueReducer, []);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        padding: 20,\n        flexDirection: \"column\",\n        textAlign: \"center\"\n      }}\n    >\n      <div>\n        <Typography variant=\"h1\">Novus Initiative Tracker</Typography>\n      </div>\n\n      <Paper>\n        {triggeredEvent &&\n          `${triggeredEvent.description} - Repetitions Left: ${\n            triggeredEvent.repeat >= 0 ? triggeredEvent.repeat : \"Forever\"\n          }`}\n      </Paper>\n\n      <Paper style={{ height: \"70vh\", margin: \"20px 20px\", overflowY: \"auto\" }}>\n        {queue.map(({ id, description, prio, repeat }) => (\n          <Paper key={id}>\n            {prio} ticks ({prio / 4} seconds) | {description}{\" \"}\n            {repeat > 0 && `| ${repeat} more times`}\n          </Paper>\n        ))}\n      </Paper>\n      <div>\n        <Input\n          placeholder=\"Event Description\"\n          defaultValue=\"\"\n          onChange={({ target: { value } }) => setEventDescription(value)}\n        />\n        <Input\n          placeholder=\"Duration\"\n          type=\"number\"\n          defaultValue={0}\n          onChange={({ target: { value } }) => setDuration(parseInt(value, 10))}\n        />\n        <Input\n          placeholder=\"Repetitions\"\n          type=\"number\"\n          defaultValue={-1}\n          onChange={({ target: { value } }) =>\n            setRepetitions(parseInt(value, 10))\n          }\n        />\n\n        <Button\n          onClick={() =>\n            dispatch({\n              type: ADD_ENTRY,\n              prio: duration,\n              maxPrio: duration,\n              repeat: repetitions,\n              description: eventDescription\n            })\n          }\n        >\n          Add Event\n        </Button>\n      </div>\n\n      <div>\n        <Button\n          onClick={() =>\n            dispatch({\n              type: POP_ENTRY\n            })\n          }\n        >\n          Pop Entry\n        </Button>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}